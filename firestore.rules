rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection: each user can read their own document.
    // HR and admin users can read any user document.
    match /users/{userId} {
      allow read: if isSignedIn() && (request.auth.uid == userId || isHR() || isAdmin());
      // Only allow users to update their own profile information.
      allow write: if request.auth.uid == userId;
    }
    
    // Requests collection: employees can create requests.
    // Users can read their own requests; HR and admin can read all.
    // Updates/deletes are restricted: HR and admin can change status;
    // employees can only update non-status fields.
    match /requests/{requestId} {
      allow create: if isSignedIn();
      allow read: if isSignedIn() && (resource.data.userId == request.auth.uid || isHR() || isAdmin());
      allow update, delete: if isHR() || isAdmin() ||
        (resource.data.userId == request.auth.uid && request.resource.data.status == resource.data.status);
    }
    
    // Resources collection: for allocation data. Only HR and admin can write.
    match /resources/{resourceId} {
      allow read: if isSignedIn();
      allow write: if isHR() || isAdmin();
    }
    
    // Helper functions to minimize unnecessary data reads
    function isSignedIn() {
      return request.auth != null;
    }
    
    // Check if the user is HR by fetching their role from their user document.
    function isHR() {
      return isSignedIn() &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'hr';
    }
    
    // Check if the user is admin.
    function isAdmin() {
      return isSignedIn() &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
